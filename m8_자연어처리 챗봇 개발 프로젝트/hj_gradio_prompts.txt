import gradio as gr
import openai

# OpenAI API
openai.api_key = ""

# 허용된 개월 수 리스트
valid_months = [1, 3, 6, 12, 24, 36]

# 시스템 메시지 설정
system_message = system = """
    당신은 금융 상품 전문가입니다.
    당신의 주된 일은 사용자의 질문에 따라 맞춤형 상품을 추천합니다.
    상품과 관련해서 묻는 질문은 중학생도 알아 듣기 쉽게 설명해줍니다.

    ** 추천 방식 **

    추천하는 상품의 종류는 총 3가지로, 예금, 적금, 파킹통장이 있습니다.

    상품을 추천할 때는 기본금리가 높은 순으로 3개, 최고금리가 높은 순으로 3개를 추천합니다.

    단, 최고한도가 넘지 않는 상품을 골라 추천합니다.

    추천시 은행은 제 1금융권과 제 2금융권을 포함합니다.

    제 1금융권은 저축은행을 제외한 은행과 뱅크로 끝납니다.
    예를 들어 KB국민은행, 신한은행, 우리은행, KEB하나은행, 부산은행, 경남은행, 대구은행, 광주은행, 전북은행, 제주은행, SC제일은행, 씨티은행, 카카오뱅크, 케이뱅크, 토스뱅크, 한국은행, 수출입은행, KDB산업은행, IBK기업은행, Sh수협은행, NH농협은행입니다.


    제 2금융권은 보험회사, 증권회사, 자산운용회사, 저축은행, 상호금융기관,
    여신전문금융회사(카드사, 캐피탈) 등입니다.
    예를 들어 KB저축은행, 하나저축은행 등이 있습니다.

    사용자가 제공하는 정보를 바탕으로 가장 적절한 상품을 추천하되, 상품의 특징과 이점을 명확하게 설명합니다.

    추천을 할 때는 다음의 정보를 포함시킵니다:
    - 해당하는 상품의 은행, 상품명
    - 상품의 기본금리, 최고금리
    - 이자 계산 방식(단리인지 복리인지 알려줍니다.)
    - 적립 방식(적금인 경우에만 알려주며, 정액 적립식인지 자유 적립식인지 알려줍니다. )
    - 가입 대상
    - 개월 수
    - 가입 방법
    - 기타 유의사항

    ** 추천 형식 **
    은행과 상품명은 양 옆에 **을 붙입니다. 예를 들어 : ** 하나은행 내맘 적금 **
    한 상품의 정보를 다 알려줬다면
    다음 상품을 한줄 띄고 보여줍니다.

    기본 금리가 높은 순으로 3개를 먼저 보여주고, 최고 금리가 높은 순 3개를 보여주기전
    =으로 선을 나눕니다.
    선으로 나눌 때 =을 80개를 사용합니다.





    ** 사용자 질문 형식 **
    1. 3가지의 상품 중 하나를 골라 추천을 해달라고 할 땐 추천 방식에 따라 추천합니다.
    예를 들어, 적금을 들려고 하는데 추천해줘라고 할 경우 적금 상품 중에서 기본금리가 높은 순으로 3개, 최고금리가 높은 순으로 3개를 추천합니다.
    단, 상품명도 자세히 적어줍니다.

    2. 입출금이 쉬운 상품을 찾는다면 파킹통장을 우선으로 추천합니다. 파킹통장도 기본금리가 높은 순으로 3개, 최고금리가 높은 순으로 3개를 추천합니다.
    3. 나이와 성별을 입력했다면 가입대상에 맞춰서 추천합니다.
    4. 특정 개월 수가 아니라면 재입력을 받습니다.
    5. 원하는 특정 은행이 있다면 그 은행에서만 상품을 추천해줍니다.
    6. 사용자가 우대조건을 말할 경우 그 우대에 맞는 상품을 우선적으로 보여줍니다.
    7. 1개월동안 돈을 넣는 경우 파킹통장을 우선으로 추천합니다.
    추천시 이유를 알려줍니다.
    8. 추천시 제 1금융권과 제 2금융권 모두를 포함하지만 특정 은행이나 특정 금융권을 원한다면 특정한 곳에 속하는 상품을 추천합니다.




    ** 개월 수 제한 **
    개월 수는 1개월, 3개월, 6개월, 12개월, 24개월, 36개월이 있습니다.

    이 개월 수외에 다른 개월 수를 받으면 가능한 개월 수를 알려주고 다시 입력을 받아야 합니다.

    예를 들어 5개월동안 적금을 들려고 하는 사용자가 있다면,

    가능한 개월수는 1개월, 3개월, 6개월, 12개월, 24개월, 36개월이 있습니다.

    이중에서 선택해 주세요.라고 재 입력을 받아야 합니다.




    ** 사용자와 상호작용 **
    상담하는 말투로 상냥하고 정중하게 제안합니다. 사용자가 특정 언어를 요구하지 않는 이상 한국어로 질의응답을 합니다.



    ** 최고 금리 계산 **
    사용자가 특정 상품의 우대 조건을 궁금해 할 경우 우대 조건을 보여주고, 해당하는 번호를 입력 받습니다.

    기본 금리에 우대 금리를 합하여 알려줍니다.

    해당하는 번호를 입력 받은 후에 다음의 정보를 포함시켜 알려줍니다.:
    - 기본금리에 우대금리를 합한 금리
    - 세후 이자율

    세후 이자율 계산은 기본금리에 우대금리를 합한 금리 * 0.846을 해서 나온 결과에 소수점 한자리까지 알려줍니다.


"""

# 입력 검증 함수
def validate_input(user_input):
    # 사용자가 입력한 개월 수를 추출하는 예시 (구체적인 로직은 필요에 따라 조정 가능)
    words = user_input.split()
    for word in words:
        if word.isdigit():
            month = int(word)
            if month not in valid_months:
                return False, month
    return True, None

# 채팅함수
def chat_with_tutor(user_input, chat_history):
    is_valid, invalid_month = validate_input(user_input)

    # 잘못된 입력이 있는 경우 피드백 제공
    if not is_valid:
        response_msg = f"죄송합니다, {invalid_month}개월은 허용되지 않은 개월 수입니다. 가능한 개월 수는 1개월, 3개월, 6개월, 12개월, 24개월, 36개월입니다. 이 중에서 다시 선택해 주세요."
        chat_history.append({"role": "assistant", "content": response_msg})
        return response_msg, chat_history

    messages = [
        {"role": "system", "content": system_message}] + chat_history

    if not chat_history:
        messages.append({"role": "user", "content": "안녕하세요! 금융상품 추천 챗봇입니다. 어떤 금융상품에 대해 알아보고 싶으신가요? 적금, 예금, 파킹통장 중 궁금한 상품을 말씀해주시면 추천해드리겠습니다!"})

    messages.append({"role": "user", "content": user_input})

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini-2024-07-18",
        messages=messages,
        temperature=0.5,
        max_tokens=300,
        top_p=1,
    )

    response_msg = response.choices[0].message.content
    chat_history.append({"role": "assistant", "content": response_msg})

    return response_msg, chat_history

# Gradio UI 구성
def start_chat():
    return "안녕하세요! 어떤 금융상품을 도와드릴까요? 먼저 고객님이 원하시는 상품이나 고객님의 상황을 알려주세요!", []

with gr.Blocks() as demo:
    gr.Markdown("# 금융상품 추천 챗봇")

    chat_history = gr.State([])

    with gr.Row():
        start_button = gr.Button("추천 시작")

    tutor_response = gr.Textbox(label="챗봇의 응답")
    user_input = gr.Textbox(label="사용자의 질문")

    with gr.Row():
        submit_button = gr.Button("질문 제출")

    start_button.click(start_chat, inputs=[], outputs=[tutor_response, chat_history])
    submit_button.click(chat_with_tutor, inputs=[user_input, chat_history], outputs=[tutor_response, chat_history])

# 실행
demo.launch(debug=True)



--------------------------------------------------------------------------------------------------
이 코드는 Gradio와 OpenAI의 GPT API를 사용하여 금융상품 추천 챗봇을 구현한 예제입니다. 이 챗봇은 사용자와 상호작용하며 적금, 예금, 파킹통장 등의 금융상품을 추천합니다.

코드 설명:


1. OpenAI API 설정:

OpenAI API 키를 설정하여 GPT 모델과 상호작용할 수 있도록 합니다.


2. 시스템 메시지 설정:

챗봇이 동작하는 기본 규칙과 가이드라인을 설정합니다. 이 시스템 메시지에는 금융 상품의 추천 방식, 상호작용 규칙, 최고 금리 계산 방식 등이 포함됩니다.


3. 채팅 함수 (chat_with_tutor):

사용자가 입력한 질문을 기반으로 GPT 모델과 상호작용하여 답변을 생성합니다.
messages 리스트는 시스템 메시지와 대화 기록을 포함하며, 이 메시지들을 기반으로 GPT 모델이 응답을 생성합니다.
생성된 응답은 대화 기록에 추가되며, 사용자에게 반환됩니다.


4. Gradio UI 구성:

start_chat 함수는 사용자가 챗봇과의 대화를 시작할 때 초기 메시지와 빈 대화 기록을 반환합니다.
Gradio 인터페이스는 버튼과 텍스트 박스를 통해 사용자가 챗봇과 상호작용할 수 있도록 구성됩니다.
사용자가 "추천 시작" 버튼을 클릭하면 start_chat 함수가 호출되어 초기 메시지를 표시합니다.
사용자가 질문을 제출하면 chat_with_tutor 함수가 호출되어 GPT 모델이 응답을 생성하고, 그 응답이 화면에 표시됩니다.


5. 앱 실행:

demo.launch(debug=True)를 통해 Gradio 앱이 실행됩니다.

----------------------------------------------------------------------------------------


보완할 점 및 개선 방안:

위의 코드는 

3. 에러 핸들링: 사용자가 잘못된 입력을 했을 때, 예를 들어 허용되지 않은 개월 수를 입력하는 경우, 적절한 피드백을 제공하는 에러 핸들링이 필요한 것을 보완하여 만든 코드입니다. 

- 입력 검증 함수 (validate_input):

validate_input 함수는 사용자가 입력한 개월 수가 허용된 개월 수(valid_months)인지 확인합니다. 만약 허용되지 않은 개월 수가 입력되면 False와 함께 잘못된 개월 수를 반환합니다.


- 에러 처리 로직:

chat_with_tutor 함수에서 사용자의 입력을 먼저 validate_input 함수로 검증합니다.
검증 결과 잘못된 입력이 확인되면, 사용자에게 올바른 개월 수를 안내하는 메시지를 반환하고, 추가적인 GPT 호출을 진행하지 않습니다.


- 사용자 피드백 제공:

사용자가 허용되지 않은 개월 수를 입력할 경우, 적절한 안내 메시지를 통해 사용자가 다시 선택할 수 있도록 유도합니다.
이러한 수정 사항을 통해 사용자가 잘못된 입력을 했을 때 적절한 피드백을 제공함으로써 사용자 경험을 향상시킬 수 있습니다.